name: Yamdb_workflow

on: [push]

jobs:
  pep8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r api_yamdb/requirements.txt
      - name: Pytest
        run: |
          pytest
      - name: Pep8 check
        run: |
          python -m flake8
          cd api_yamdb/
          python manage.py test
  docker-push:
    runs-on: ubuntu-latest
    name: Push to Docker
    needs: pep8
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with: 
          push: true
          file: ../api_yamdb/Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/yamdb_final:latest
  deploy_on_server:
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd yamdb
            sudo docker-compose stop && sudo docker-compose stop nginx
            sudo docker-compose rm web && sudo docker-compose rm nginx
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yamdb_final:latest
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> . env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d
  telegram_check:
    runs-on: ubuntu-latest
    needs: deploy_on_server
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} запущенный ${{ github.actor }} в репозитории ${{ github.repository }}!
            ${{ github.event.commits[0].message }}
            https://github.com/${{ github.repository }}/commit/${{github.sha}}